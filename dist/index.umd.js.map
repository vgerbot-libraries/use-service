{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { ApplicationContext, Mark } from '@vgerbot/ioc';\nimport React, { useContext, useRef } from 'react';\nimport { Newable } from '@vgerbot/ioc/dist/types/Newable';\nimport { PartialInstAwareProcessor } from '@vgerbot/ioc/dist/types/InstantiationAwareProcessor';\nimport { makeObservable } from 'mobx';\n\nconst IoCContext = React.createContext<ApplicationContext | undefined>(undefined);\n\nconst MARK_AS_MOBX_OBSERVABLE = 'mark-as-mobx-observable';\n\nexport function Observable() {\n    return Mark(MARK_AS_MOBX_OBSERVABLE, true);\n}\n\nexport type IoCProps = React.PropsWithChildren<{\n    callback?: (appctx: ApplicationContext) => void;\n}>;\n\nexport function IoC(props: IoCProps) {\n    const ref = useRef<ApplicationContext>();\n    if (!ref.current) {\n        const appctx = new ApplicationContext();\n        if (typeof props.callback === 'function') {\n            props.callback(appctx);\n        }\n        appctx.registerInstAwareProcessor(\n            class implements PartialInstAwareProcessor {\n                afterInstantiation<T extends object>(instance: T): T {\n                    const markInfo = appctx.getClassMetadata(instance.constructor as Newable<T>).getCtorMarkInfo();\n                    if (markInfo[MARK_AS_MOBX_OBSERVABLE]) {\n                        makeObservable(instance);\n                    }\n                    return instance;\n                }\n            }\n        );\n        ref.current = appctx;\n    }\n    return React.createElement(\n        IoCContext.Provider,\n        {\n            value: ref.current\n        },\n        props.children\n    );\n}\n\nexport function useService<T>(ctor: Newable<T>): T {\n    const ctx = useContext(IoCContext);\n    if (!ctx) {\n        throw new Error('<IoC></IoC> has not been applied to the component.');\n    }\n    return ctx.getInstance(ctor);\n}\n\nexport * from '@vgerbot/ioc';\n"],"names":["IoCContext","React","createContext","undefined","MARK_AS_MOBX_OBSERVABLE","props","ref","useRef","current","appctx_1","ApplicationContext","callback","registerInstAwareProcessor","class_1","prototype","afterInstantiation","instance","getClassMetadata","constructor","getCtorMarkInfo","makeObservable","createElement","Provider","value","children","Mark","ctor","ctx","useContext","Error","getInstance"],"mappings":"oWAMA,IAAMA,EAAaC,EAAMC,mBAA8CC,GAEjEC,EAA0B,gCAU1B,SAAcC,GAChB,IAAMC,EAAMC,EAAAA,SACZ,IAAKD,EAAIE,QAAS,CACd,IAAMC,EAAS,IAAIC,EAAAA,mBACW,mBAAnBL,EAAMM,UACbN,EAAMM,SAASF,GAEnBA,EAAOG,2BAA0B,WAC7B,SAAAC,KAQA,OAPIA,EAAkBC,UAAAC,mBAAlB,SAAqCC,GAKjC,OAJiBP,EAAOQ,iBAAiBD,EAASE,aAA2BC,kBAChEf,IACTgB,EAAcA,eAACJ,GAEZA,GAEdH,EAT4B,IAWjCP,EAAIE,QAAUC,EAElB,OAAOR,EAAMoB,cACTrB,EAAWsB,SACX,CACIC,MAAOjB,EAAIE,SAEfH,EAAMmB,mCAhCV,OAAOC,EAAIA,KAACrB,GAAyB,iBAoCnC,SAAwBsB,GAC1B,IAAMC,EAAMC,aAAW5B,GACvB,IAAK2B,EACD,MAAM,IAAIE,MAAM,sDAEpB,OAAOF,EAAIG,YAAYJ"}