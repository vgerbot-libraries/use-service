{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { ApplicationContext, Mark } from '@vgerbot/ioc';\nimport React, { useContext, useRef } from 'react';\nimport { Newable } from '@vgerbot/ioc/dist/types/Newable';\nimport { PartialInstAwareProcessor } from '@vgerbot/ioc/dist/types/InstantiationAwareProcessor';\nimport { makeAutoObservable, makeObservable } from 'mobx';\nimport { Observer } from 'mobx-react-lite';\n\nconst IoCContext = React.createContext<ApplicationContext | undefined>(undefined);\n\nconst MARK_AS_MOBX_OBSERVABLE = 'mark-as-mobx-observable';\n\nconst MARK_AS_MOBX_AUTO_OBSERVABLE = 'mark-as-mobx-auto-observerable';\n\nexport function Observable() {\n    return Mark(MARK_AS_MOBX_OBSERVABLE, true);\n}\n\nexport function AutoObservable() {\n    return Mark(MARK_AS_MOBX_AUTO_OBSERVABLE, true);\n}\n\nexport type IoCProps = React.PropsWithChildren<{\n    callback?: (appctx: ApplicationContext) => void;\n}>;\n\nexport function IoC(props: IoCProps) {\n    const ref = useRef<ApplicationContext>();\n    if (!ref.current) {\n        const appctx = new ApplicationContext();\n        if (typeof props.callback === 'function') {\n            props.callback(appctx);\n        }\n        appctx.registerInstAwareProcessor(\n            class implements PartialInstAwareProcessor {\n                afterInstantiation<T extends object>(instance: T): T {\n                    const markInfo = appctx.getClassMetadata(instance.constructor as Newable<T>).getCtorMarkInfo();\n                    if (markInfo[MARK_AS_MOBX_OBSERVABLE]) {\n                        makeObservable(instance);\n                    }\n                    if(markInfo[MARK_AS_MOBX_AUTO_OBSERVABLE]) {\n                        makeAutoObservable(instance);\n                    }\n                    return instance;\n                }\n            }\n        );\n        ref.current = appctx;\n    }\n    return React.createElement(\n        IoCContext.Provider,\n        {\n            value: ref.current\n        },\n        props.children\n    );\n}\n\nexport function useService<T>(ctor: Newable<T>): T {\n    const ctx = useContext(IoCContext);\n    if (!ctx) {\n        throw new Error('<IoC></IoC> has not been applied to the component.');\n    }\n    return ctx.getInstance(ctor);\n}\n\nexport function renderObserver(render: () => React.ReactElement) {\n    return React.createElement(\n        Observer,\n        {\n            render: render\n        },\n        []\n    ) as React.ReactElement\n}\n\nexport * from '@vgerbot/ioc';\n"],"names":["IoCContext","React","createContext","undefined","MARK_AS_MOBX_OBSERVABLE","MARK_AS_MOBX_AUTO_OBSERVABLE","Mark","props","ref","useRef","current","appctx_1","ApplicationContext","callback","registerInstAwareProcessor","class_1","prototype","afterInstantiation","instance","markInfo","getClassMetadata","constructor","getCtorMarkInfo","makeObservable","makeAutoObservable","createElement","Provider","value","children","render","Observer","ctor","ctx","useContext","Error","getInstance"],"mappings":"maAOA,IAAMA,EAAaC,EAAMC,mBAA8CC,GAEjEC,EAA0B,0BAE1BC,EAA+B,6DAOjC,OAAOC,EAAIA,KAACD,GAA8B,UAOxC,SAAcE,GAChB,IAAMC,EAAMC,EAAAA,SACZ,IAAKD,EAAIE,QAAS,CACd,IAAMC,EAAS,IAAIC,EAAAA,mBACW,mBAAnBL,EAAMM,UACbN,EAAMM,SAASF,GAEnBA,EAAOG,2BAA0B,WAC7B,SAAAC,KAWA,OAVIA,EAAkBC,UAAAC,mBAAlB,SAAqCC,GACjC,IAAMC,EAAWR,EAAOS,iBAAiBF,EAASG,aAA2BC,kBAO7E,OANIH,EAASf,IACTmB,EAAcA,eAACL,GAEhBC,EAASd,IACRmB,EAAkBA,mBAACN,GAEhBA,GAEdH,EAZ4B,IAcjCP,EAAIE,QAAUC,EAElB,OAAOV,EAAMwB,cACTzB,EAAW0B,SACX,CACIC,MAAOnB,EAAIE,SAEfH,EAAMqB,mCAvCV,OAAOtB,EAAIA,KAACF,GAAyB,qBAmDnC,SAAyByB,GAC3B,OAAO5B,EAAMwB,cACTK,WACA,CACID,OAAQA,GAEZ,kBAdF,SAAwBE,GAC1B,IAAMC,EAAMC,aAAWjC,GACvB,IAAKgC,EACD,MAAM,IAAIE,MAAM,sDAEpB,OAAOF,EAAIG,YAAYJ"}